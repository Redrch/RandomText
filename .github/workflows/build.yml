name: Nuitka Build (Windows / macOS / Linux)

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            C:\\Users\\runneradmin\\AppData\\Local\\pip\\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Ensure build tools (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Windows runner: MSVC toolchain is provided by the runner"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt || true

      - name: Install Nuitka
        run: |
          pip install --upgrade nuitka

      - name: Prepare build output dir (Linux/macOS)
        if: runner.os != 'Windows'
        run: mkdir -p build/${{ matrix.os }}

      - name: Prepare build output dir (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Test-Path -Path "build\\${{ matrix.os }}")) { New-Item -ItemType Directory -Path "build\\${{ matrix.os }}" | Out-Null }

      - name: Build with Nuitka (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python -m nuitka --standalone --onefile --include-data-dir=nltk=nltk --output-dir=build/${{ matrix.os }} --assume-yes-for-downloads main.py

      - name: Build with Nuitka (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m nuitka --standalone --onefile --include-data-dir=nltk=nltk --output-dir=build\\${{ matrix.os }} --assume-yes-for-downloads main.py

      - name: List build output (Linux/macOS)
        if: runner.os != 'Windows'
        run: ls -la build/${{ matrix.os }}

      - name: List build output (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: Get-ChildItem -Path "build\\${{ matrix.os }}" -Recurse | Format-List

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: RandomText-${{ matrix.os }}
          path: build/${{ matrix.os }}
          retention-days: 30

  publish:
    name: Create Release and Upload Artifacts
    needs: build
    runs-on: ubuntu-latest
    # Only publish on tag pushes
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release for tag
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release created by CI for tag ${{ github.ref_name }} (commit ${{ github.sha }}).
          draft: false
          prerelease: false

      - name: Upload each artifact file as release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          set -e
          # strip the template part {?name,label}
          UPLOAD_URL_CLEAN=${UPLOAD_URL%\{*}
          echo "Upload URL: $UPLOAD_URL_CLEAN"
          find artifacts -type f | while read -r file; do
            fname=$(basename "$file")
            echo "Uploading $fname"
            curl -s -X POST "$UPLOAD_URL_CLEAN?name=$fname" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file"
          done